package breach

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestMerge_Case1_OneElementMatches(t *testing.T) {
	seq1 := []byte{0x55, 0x1C}
	seq2 := []byte{0x1C, 0x55, 0x1C}

	actual := merge(seq1, seq2)

	assert.Equal(t, []byte{0x55, 0x1C, 0x55, 0x1C}, actual)
}

func TestMerge_Case1_TwoElementsMatch(t *testing.T) {
	seq1 := []byte{0x55, 0x1C}
	seq2 := []byte{0x55, 0x1C, 0x1C}

	actual := merge(seq1, seq2)

	assert.Equal(t, []byte{0x55, 0x1C, 0x1C}, actual)
}

func TestMerge_Case1_NoMatch(t *testing.T) {
	seq1 := []byte{0x55, 0xFF}
	seq2 := []byte{0x55, 0x1C, 0x1C}

	actual := merge(seq1, seq2)

	assert.Equal(t, []byte{0x55, 0xFF, 0x55, 0x1C, 0x1C}, actual)
}

func TestFindLongestSeqs_FirstRowMatch(t *testing.T) {
	seqs := [][]byte{
		{0x55, 0x1C, 0x1C, 0x55},
		{0x55, 0x1C, 0x1C},
		{0x55, 0xFF, 0x55, 0x1C, 0x1C},
		{0x55, 0x1C, 0x55, 0x1C, 0xFF},
		{0x55, 0x1C, 0x55, 0x1C},
	}

	actual := findLongestSeqs([]byte{0x55, 0x55, 0x1C, 0xFF, 0x1C}, seqs, 4)

	assert.Equal(t, [][]byte{
		{0x55, 0x1C, 0x1C, 0x55},
		{0x55, 0x1C, 0x55, 0x1C},
	}, actual)
}

func TestFindLongestSeqs_NoFirstRowMatch(t *testing.T) {
	seqs := [][]byte{
		{0x55, 0x1C, 0x1C, 0x55},
		{0x55, 0x1C, 0x1C},
		{0x55, 0xFF, 0x55, 0x1C, 0x1C},
		{0x55, 0x1C, 0x55, 0x1C, 0xFF},
		{0x55, 0x1C, 0x55, 0x1C},
	}

	actual := findLongestSeqs([]byte{0x1C, 0xFF, 0x1C, 0xE9, 0xE9}, seqs, 4)

	assert.Equal(t, [][]byte{{0x55, 0x1C, 0x1C}}, actual)
}

func TestOptimize(t *testing.T) {
	seqs := [][]byte{
		{0x1C, 0x55},
		{0x55, 0xFF, 0x55, 0x1C, 0x1C},
		{0x55, 0x1C, 0x55, 0x1C, 0xFF},
		{0x55, 0x1C, 0x55, 0x1C},
	}

	actual := Optimize([]byte{0x55, 0x55, 0x1C, 0xFF, 0x1C}, seqs, 6)

	assert.Equal(t, []byte{0x1C, 0x55, 0xFF, 0x55, 0x1C, 0x1C}, actual)
}
